from serial import Serial
from typing import Any; Dict
from .constants import BarCode, BarCodePosition, CharSet, Chinese, CodePage


class ThermalPrinter(Serial):
    __lines = 0  # type: int
    __feeds = 0  # type: int

    def __init__(self, port: str='/dev/ttyAMA0', baudrate: int=19200, **kwargs:Any) -> None: ...
    def _on_exit(self) -> None: ...

    @property
    def is_online(self) -> bool: ...
    @is_online.setter
    def is_online(self, _: Any) -> None:  ...

    @property
    def is_sleeping(self) -> bool: ...
    @is_sleeping.setter
    def is_sleeping(self, _: Any) -> None: ...

    @property
    def lines(self) -> int: ...
    @lines.setter
    def lines(self, _: Any): ...

    @property
    def feeds(self) -> int: ...
    @feeds.setter
    def feeds(self, _: Any): ...

    @property
    def max_column(self) -> int: ...
    @max_column.setter
    def max_column(self, _: Any): ...

    def out(self, data: Any, line_feed: bool=True, **kwargs:Any) -> None: ...
    def send_command(self, *args: Any) -> None: ...
    def to_bytes(self, data: Any) -> bytes: ...

    def barcode(self, data: str, barcode_type: BarCode) -> None: ...
    def barcode_height(self, height: int=162) -> None: ...
    def barcode_left_margin(self, margin: int=0) -> None: ...
    def barcode_position(self, position: BarCodePosition=BarCodePosition.HIDDEN) -> None: ...
    def barcode_width(self, width: int=3) -> None: ...
    def bold(self, state: bool=False) -> None: ...
    def charset(self, charset: CharSet=CharSet.USA) -> None: ...
    def char_spacing(self, spacing: int=0) -> None: ...
    def chinese(self, state: bool=False): ...
    def chinese_format(self, fmt: Chinese=Chinese.GBK) -> None: ...
    def codepage(self, codepage: CodePage=CodePage.CP437) -> None: ...
    def double_height(self, state: bool=False) -> None: ...
    def double_width(self, state: bool=False) -> None: ...
    def feed(self, number: int=1) -> None: ...
    def flush(self, clear: bool=False) -> None: ...
    def image(self, image: object) -> None: ...
    def inverse(self, state: bool=False) -> None: ...
    def justify(self, value: str='L') -> None: ...
    def left_margin(self, margin: int=0) -> None: ...
    def line_spacing(self, spacing: int=30) -> None: ...
    def offline(self) -> None: ...
    def online(self) -> None: ...
    def reset(self) -> None: ...
    def rotate(self, state: int=False) -> None: ...
    def size(self, value: str='S') -> None: ...
    def sleep(self, seconds: int=1) -> None: ...
    def status(self) -> Dict[str, bool]: ...
    def strike(self, state: bool=False) -> None: ...
    def test(self) -> None: ...
    def underline(self, weight: int=0) -> None: ...
    def upside_down(self, state: int=False) -> None: ...
    def wake(self) -> None: ...
